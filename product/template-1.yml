AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 7
    Description: retention period for CloudWatch Logs
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name


Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        TABLE_NAME: !Ref ProductTable
        LOG_LEVEL: !Ref LogLevel
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2"
      - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:UtilLayer:1"


Resources:
  # Product Catalog #
  DeadLetterQueue:
    Type: "AWS::SQS::Queue"

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Product-Catalog-rest-${Environment}"
      AttributeDefinitions:
        # - AttributeName: UPC
        #   AttributeType: S
        - AttributeName: sku
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: store
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: sku #Uniques number 
          KeyType: HASH

      GlobalSecondaryIndexes:
        - IndexName: ByStore
          KeySchema:
            - AttributeName: store
              KeyType: HASH
            - AttributeName: category
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # TableParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub /boppis/${Environment}/products/table/name
  #     Type: String
  #     Value: !Ref Table

  #############
  # FUNCTIONS #
  #############
  ProductLookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: product-lookup.handler
      Events:
        ProductApi:
          Type: Api
          Properties:
            Path: /products/{store}
            Method: GET
            RestApiId: !Ref ProductApi
        ProductApiBySku:
          Type: Api
          Properties:
            Path: /product/{sku}
            Method: GET
            RestApiId: !Ref ProductApi

      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - DynamoDBReadPolicy:
            TableName: !Ref ProductTable

  ProductLookupGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProductLookupFunction}"
      RetentionInDays: !Ref RetentionInDays
  ProductCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: create-product.handler
      Events:
        ProductUpdateApi:
          Type: Api
          Properties:
            Path: /product
            Method: PUT
            RestApiId: !Ref ProductApi
      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - DynamoDBWritePolicy:
            TableName: !Ref ProductTable

  ProductCreateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProductCreateFunction}"
      RetentionInDays: !Ref RetentionInDays
  InventoryUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: update-inventory.handler
      Events:
        EBInventoryUpdate:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern: 
              source: ["org.boppis.order"]
              detail: 
                eventSource: ["org.boppis.order.action"]
                eventName: [ORDER_CREATED, ORDER_COMPLETED]
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeadLetterQueue.Arn

      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - DynamoDBWritePolicy:
            TableName: !Ref ProductTable
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt DeadLetterQueue.Arn
  InventoryUpdateFunctionLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${InventoryUpdateFunction}"
      RetentionInDays: !Ref RetentionInDays

  ###############
  # API GATEWAY #
  ###############
  ProductApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: "Prod"
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yml
  #     AccessLogSettings:
  #       DestinationArn: !GetAtt AccessLogs.Arn
  #       Format:
  #         !Join
  #         - ','
  #         - - '{"requestId": "$context.requestId"'
  #           - '"ip": "$context.identity.sourceIp"'
  #           - '"routeKey": "$context.routeKey"'
  #           - '"protocol": "$context.protocol"'
  #           - '"method": "$context.httpMethod"'
  #           - '"path": "$context.path"'
  #           - '"requestTime": "$context.requestTime"'
  #           - '"integrationLatency": "$context.integrationLatency"'
  #           - '"integrationStatus": "$context.integrationStatus"'
  #           - '"integrationErrorMessage": "$context.integrationErrorMessage"'
  #           - '"responseLatency": "$context.responseLatency"'
  #           - '"responseLength": "$context.responseLength"'
  #           - '"status": "$context.status"'
  #           - '"userAgent": "$context.identity.userAgent"}'
  # AccessLogs:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: rest-api-product/access-logs
  #     RetentionInDays: !Ref RetentionInDays
Outputs:
  ProductApiEndpoint: 
    Description: "API Gateway endpoint URL for Prod stage for Product api"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

